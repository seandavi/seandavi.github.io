<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>genomics | Academic</title>
    <link>/tag/genomics/</link>
      <atom:link href="/tag/genomics/index.xml" rel="self" type="application/rss+xml" />
    <description>genomics</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Wed, 11 Mar 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>genomics</title>
      <link>/tag/genomics/</link>
    </image>
    
    <item>
      <title>OmicIDX</title>
      <link>/project/omicidx/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/project/omicidx/</guid>
      <description>&lt;p&gt;OmicIDX is an ecosystem that &lt;em&gt;treats metadata&lt;/em&gt; from public genomics
repositories as &lt;em&gt;data&lt;/em&gt;. Metadata collection from source repositories
updates occur regularly and processing using a purpose-build &lt;a href=&#34;https://github.com/omicidx/omicidx-parsers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;parsing
library&lt;/a&gt; produces standard
json format representations. The &lt;a href=&#34;https://github.com/omicidx/omicidx-builder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OmicIDX
builder&lt;/a&gt; automates
&lt;a href=&#34;https://cloud.google.com/bigquery&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bigquery&lt;/a&gt; and web-based API
generation and updates. The &lt;a href=&#34;https://api.omicidx.cancerdatasci.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenAPI-based web
API&lt;/a&gt; enables performant
language-agnostic search, retrieval, and analysis of OmicIDX
data. Finally, data are augmented with &lt;a href=&#34;https://ii.nlm.nih.gov/MTI/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;natural language
processing&lt;/a&gt;
to produce Medical Subject Heading
&lt;a href=&#34;https://www.nlm.nih.gov/mesh/meshhome.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MeSH&lt;/a&gt;  mapping and with
heuristic text matching to map terms to ontologies.&lt;/p&gt;
&lt;p&gt;Datasets currently included in OmicIDX include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SRA
&lt;ul&gt;
&lt;li&gt;studies&lt;/li&gt;
&lt;li&gt;samples&lt;/li&gt;
&lt;li&gt;experiments&lt;/li&gt;
&lt;li&gt;runs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dbGaP mapping from SRA&lt;/li&gt;
&lt;li&gt;Biosample
&lt;ul&gt;
&lt;li&gt;samples&lt;/li&gt;
&lt;li&gt;projects&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GEO
&lt;ul&gt;
&lt;li&gt;platforms&lt;/li&gt;
&lt;li&gt;series&lt;/li&gt;
&lt;li&gt;samples&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Data are augmented with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MeSH&lt;/li&gt;
&lt;li&gt;~200 Ontologies&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Build and deploy an NCBI GEO metadata fetch API</title>
      <link>/post/cloud-run-notes/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/post/cloud-run-notes/</guid>
      <description>&lt;p&gt;In this post, I want to demonstrate building a simple web API converts
an NCBI &lt;a href=&#34;https://ncbi.nlm.nih.gov/geo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GEO&lt;/a&gt; accession and associated metadata to &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/an-introduction-to-json&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;json&lt;/a&gt; format, and
then deploy that application as a web service on Google Cloud Platform
&lt;a href=&#34;https://cloud.google.com/run&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloud Run&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hear from GEOquery users that sometimes they just want to get the
metadata for one or more accessions rather than getting the entire GEO
record. My &lt;a href=&#34;https://github.com/omicidx/omicidx-parsers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;omicidx-parser&lt;/a&gt; library has functionality to do this
conversion. We will leverage this functionality to build a small web
application that we can deploy using &lt;a href=&#34;https://en.wikipedia.org/wiki/Serverless_computing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;serverless&lt;/a&gt; approach to stand up
an API that returns a &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/an-introduction-to-json&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;json&lt;/a&gt; conversion of GEO metadata.&lt;/p&gt;
&lt;h2 id=&#34;tooling&#34;&gt;Tooling&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Google cloud platform, specifically &lt;a href=&#34;https://en.wikipedia.org/wiki/Serverless_computing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;serverless&lt;/a&gt; &lt;a href=&#34;https://cloud.google.com/run&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloud Run&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;python programming language&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://fastapi.tiangolo.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fastapi&lt;/a&gt; library for web API development&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[docker] containers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git and github&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code: &lt;a href=&#34;https://github.com/seandavi/blog-code/&#34;&gt;https://github.com/seandavi/blog-code/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-will-i-learn-and-do&#34;&gt;What will I learn and do?&lt;/h2&gt;
&lt;p&gt;In this post, we will learn the basics of &lt;a href=&#34;https://cloud.google.com/run&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloud Run&lt;/a&gt; through
examples. Additionally, we will learn a bit about web app development
using the &lt;a href=&#34;https://fastapi.tiangolo.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fastapi&lt;/a&gt; python web framework.&lt;/p&gt;
&lt;p&gt;At the end of this post, you will have a containerized web application
running locally that can take a GEO accession and return a &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/an-introduction-to-json&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;json&lt;/a&gt;
version of the metadata.&lt;/p&gt;
&lt;p&gt;If you have a Google Cloud Platform account that allows you to create
projects, you should be able to run your application in Google Cloud
Run.&lt;/p&gt;
&lt;h2 id=&#34;what-is-cloud-run&#34;&gt;What is Cloud Run?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/run&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloud Run&lt;/a&gt; is a fully managed compute platform that automatically
scales your stateless containers. In other words, write a web
application, place it in a &lt;a href=&#34;https://docker.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docker container&lt;/a&gt;, and then deploy to the
cloud. Cloud Run is one of a family of technologies referred to as
&lt;a href=&#34;https://en.wikipedia.org/wiki/Serverless_computing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;serverless&lt;/a&gt; it abstracts away all infrastructure management. Cloud
Run is built upon an open standard, &lt;a href=&#34;https://knative.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Knative&lt;/a&gt;, enabling the
portability of your applications.&lt;/p&gt;
&lt;h2 id=&#34;build-your-app&#34;&gt;Build your app&lt;/h2&gt;
&lt;p&gt;Sorry, but I&amp;rsquo;m going to let the code do most of the talking here. In
short, Google Cloud Run supports any web development language or
framework that can be deployed as a docker container.&lt;/p&gt;
&lt;p&gt;Here, I will use python and adopt &lt;a href=&#34;https://fastapi.tiangolo.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fastapi&lt;/a&gt; a framework for building
performant REST APIs.&lt;/p&gt;
&lt;p&gt;The GEO parsing will leverage the &lt;a href=&#34;https://github.com/omicidx/omicidx-parsers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;omicidx-parser&lt;/a&gt; library.&lt;/p&gt;
&lt;h2 id=&#34;containers-are-front-and-center&#34;&gt;Containers are front-and-center&lt;/h2&gt;
&lt;p&gt;Google&amp;rsquo;s &lt;a href=&#34;https://cloud.google.com/run&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloud Run&lt;/a&gt; creates a &amp;ldquo;service&amp;rdquo; that accepts http requests
and returns responses. The requests and responses are not predefined
by Cloud Run, allowing any approach that your chosen programming
language supports. Once your web application is written and tested
locally, create a &lt;a href=&#34;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dockerfile&lt;/a&gt; that generates a containerized version
of it. The generated docker container is what you will pass along to
&lt;a href=&#34;https://cloud.google.com/run&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloud Run&lt;/a&gt; as the application. &lt;a href=&#34;https://cloud.google.com/run&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloud Run&lt;/a&gt; will then create a
&amp;ldquo;service&amp;rdquo; by setting up your docker container to run &amp;ldquo;on demand&amp;rdquo; when
a web request is directed to it.&lt;/p&gt;
&lt;p&gt;Any programming dependencies, operating system or system dependencies,
or necessary software are simply included in the &lt;a href=&#34;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dockerfile&lt;/a&gt;
description to be incorporated into the container. Local testing is
straightforward by simply running the docker container locally.&lt;/p&gt;
&lt;h2 id=&#34;example-application-and-deployment&#34;&gt;Example application and deployment&lt;/h2&gt;
&lt;p&gt;As of today, I am using &lt;a href=&#34;https://python-poetry.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;poetry&lt;/a&gt; for python dependency management
(think pip and virtualenv replacement) and package building. To get
started with poetry, install:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py \
  | python
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;rsquo;ll leave the poetry parts of things out for now, but you will see
some poetry command lines to build the cloud run environment.&lt;/p&gt;
&lt;p&gt;Next, checkout the &lt;a href=&#34;https://github.com/seandavi/blog-code&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;example repo&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/seandavi/blog-code
cd blog-code/geo-metadata-cloud-run/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To set up a local development environment and then test the app
locally, I use a couple of poetry commands (see poetry docs for what
these do, specifically).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;poetry install
poetry run uvicorn app.main:app
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, navigate to http://localhost:8000/docs. There, by default, you are redirected to the auto-generated &lt;a href=&#34;https://swagger.io/docs/specification/about/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenAPI&lt;/a&gt; API documentation (yes, you get this &lt;em&gt;for free&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;To see the results for a specific accession, click here: http://localhost:8000/geo/GSM48743. An example response will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;GSM48743&amp;quot;: {
        &amp;quot;title&amp;quot;: &amp;quot;Patient sample ST163, Liposarcoma&amp;quot;,
        &amp;quot;status&amp;quot;: &amp;quot;Public on Oct 11 2005&amp;quot;,
        &amp;quot;submission_date&amp;quot;: &amp;quot;2005-04-21&amp;quot;,
        &amp;quot;last_update_date&amp;quot;: &amp;quot;2005-11-22&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;RNA&amp;quot;,
        &amp;quot;anchor&amp;quot;: null,
        &amp;quot;contact&amp;quot;: {
            &amp;quot;city&amp;quot;: &amp;quot;Bethesda&amp;quot;,
            &amp;quot;name&amp;quot;: {
                &amp;quot;first&amp;quot;: &amp;quot;Sean&amp;quot;,
                &amp;quot;middle&amp;quot;: &amp;quot;&amp;quot;,
                &amp;quot;last&amp;quot;: &amp;quot;Davis&amp;quot;
            },
            &amp;quot;email&amp;quot;: &amp;quot;sdavis2@mail.nih.gov&amp;quot;,
            &amp;quot;state&amp;quot;: &amp;quot;MD&amp;quot;,
            &amp;quot;address&amp;quot;: &amp;quot;37 Convent Drive, Room 6138&amp;quot;,
            &amp;quot;department&amp;quot;: null,
            &amp;quot;country&amp;quot;: &amp;quot;USA&amp;quot;,
            &amp;quot;web_link&amp;quot;: null,
            &amp;quot;institute&amp;quot;: &amp;quot;National Cancer Institute&amp;quot;,
            &amp;quot;zip_postal_code&amp;quot;: null,
            &amp;quot;phone&amp;quot;: &amp;quot;301-435-2652&amp;quot;
        },
        &amp;quot;description&amp;quot;: &amp;quot;Diagnosis: Liposarcoma\nKeywords = sarcoma, cDNA, Liposarcoma&amp;quot;,
        &amp;quot;accession&amp;quot;: &amp;quot;GSM48743&amp;quot;,
        &amp;quot;biosample&amp;quot;: null,
        &amp;quot;tag_count&amp;quot;: null,
        &amp;quot;tag_length&amp;quot;: null,
        &amp;quot;platform_id&amp;quot;: &amp;quot;GPL1977&amp;quot;,
        &amp;quot;hyb_protocol&amp;quot;: null,
        &amp;quot;channel_count&amp;quot;: 2,
        &amp;quot;scan_protocol&amp;quot;: null,
        &amp;quot;data_row_count&amp;quot;: 12600,
        &amp;quot;library_source&amp;quot;: null,
        &amp;quot;overall_design&amp;quot;: null,
        &amp;quot;sra_experiment&amp;quot;: null,
        &amp;quot;data_processing&amp;quot;: null,
        &amp;quot;supplemental_files&amp;quot;: [
            &amp;quot;NONE&amp;quot;
        ],
        &amp;quot;channels&amp;quot;: [
            {
                &amp;quot;label&amp;quot;: null,
                &amp;quot;taxid&amp;quot;: [
                    9606
                ],
                &amp;quot;molecule&amp;quot;: &amp;quot;total RNA&amp;quot;,
                &amp;quot;organism&amp;quot;: &amp;quot;Homo sapiens&amp;quot;,
                &amp;quot;source_name&amp;quot;: &amp;quot;Liposarcoma&amp;quot;,
                &amp;quot;label_protocol&amp;quot;: null,
                &amp;quot;growth_protocol&amp;quot;: null,
                &amp;quot;extract_protocol&amp;quot;: null,
                &amp;quot;treatment_protocol&amp;quot;: null,
                &amp;quot;characteristics&amp;quot;: [
                    
                ]
            },
            {
                &amp;quot;label&amp;quot;: null,
                &amp;quot;taxid&amp;quot;: [
                    9606
                ],
                &amp;quot;molecule&amp;quot;: &amp;quot;total RNA&amp;quot;,
                &amp;quot;organism&amp;quot;: &amp;quot;Homo sapiens&amp;quot;,
                &amp;quot;source_name&amp;quot;: &amp;quot;Pooled sarcoma cell lines&amp;quot;,
                &amp;quot;label_protocol&amp;quot;: null,
                &amp;quot;growth_protocol&amp;quot;: null,
                &amp;quot;extract_protocol&amp;quot;: null,
                &amp;quot;treatment_protocol&amp;quot;: null,
                &amp;quot;characteristics&amp;quot;: [
                    
                ]
            }
        ],
        &amp;quot;contributor&amp;quot;: [
            
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, the web application is running locally. We can
&amp;ldquo;containerize&amp;rdquo; the application by building the docker container. The
&lt;a href=&#34;https://github.com/seandavi/blog-code/blob/master/geo-metadata-cloud-run/Dockerfile&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;associated Dockerfile&lt;/a&gt; has instructions for doing so. To actually
build the docker image, do the following, replacing &lt;code&gt;PROJECT_ID&lt;/code&gt; below with
your GCP project ID. You can view your project ID by running the
command.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcloud config get-value project.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PROJECT_ID=&#39;my-google-project-name&#39;
docker build -t gcr.io/${PROJECT_ID}/geo-cloud-run .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Push the docker image to the Google Cloud Project image
repository. You can also use dockerhub name/url if you like.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker push gcr.io/${PROJECT_ID}/geo-cloud-run
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run the app as a dockerized app locally.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -p 8000:80 gcr.io/${PROJECT_ID}/geo-cloud-run 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, you should now be able to access the API at http://localhost:8000/docs.&lt;/p&gt;
&lt;p&gt;One more step, deployment, gets us the application running in the
cloud as a serverless application. Deploy using the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcloud run deploy --image gcr.io/${PROJECT_ID}/geo-cloud-run --platform managed
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;You will be prompted for the service name: press Enter to accept the
default name, geo-cloud-run&lt;/li&gt;
&lt;li&gt;You will be prompted for region: select the region of your choice,
for example us-central1.&lt;/li&gt;
&lt;li&gt;You will be prompted to allow unauthenticated invocations: respond &lt;code&gt;y&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then wait a few moments until the deployment is complete. On success,
the command line displays the service URL. If you navigate to that
service URL, you will be accessing your &lt;em&gt;entirely serverless&lt;/em&gt;
application. Build more complicated applications by simply:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Adjust python code.&lt;/li&gt;
&lt;li&gt;Rebuild docker image.&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;gcloud run update ....&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When completed, simply run &lt;code&gt;gcloud run delete ....&lt;/code&gt; to remove your
service and application.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Symposium: Participants Share Data 2019</title>
      <link>/project/nci-participants-share-data-2019/</link>
      <pubDate>Thu, 26 Sep 2019 17:44:07 -0400</pubDate>
      <guid>/project/nci-participants-share-data-2019/</guid>
      <description>&lt;p&gt;We convened a &lt;a href=&#34;https://events.cancer.gov/dccp/pcgdr/agenda&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;symposium on September 26-27,
2019&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The landscape of genomic medicine is rapidly evolving and includes
direct access to low-cost genomic sequencing through
direct-to-consumer genetic testing and commercial services providing
sequencing and interpretation. Increasingly, individuals want to share
their genomic data and associated clinical information for research
purposes. Several models exist to enable personal control of sharing
of genomics data. For individuals who want to make their personal
genomic data available for research or third parties for analysis or
interpretation, little support exists to answer questions, provide
technical support, or give feedback on the value of their data. Under
the auspices of the Cancer Moonshot (sm), NCI welcomes advocates,
policy leaders, and the public to participate in a two-day,
multisession workshop to explore the impact of personal control of
genomic data sharing to research, clinical care, and participants
well-being and engagement.&lt;/p&gt;
&lt;p&gt;The symposium hosted sessions on the following topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Motivations for and perceptions of participants controlling their
own data&lt;/li&gt;
&lt;li&gt;Facilitating personal control of sharing data: existing approaches
and platforms&lt;/li&gt;
&lt;li&gt;Risks and benefits to participants and their communities&lt;/li&gt;
&lt;li&gt;Sharing data in healthcare settings&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please sign up for our &lt;a href=&#34;https://list.nih.gov/cgi-bin/wa.exe?SUBED1=PARTICIPANTSHAREDDATASYMPOSIUM&amp;amp;A=1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mailing list&lt;/a&gt; for updates about the symposium.&lt;/p&gt;
&lt;p&gt;For questions regarding this symposium, email &lt;a href=&#34;mailto:NCIParticipantShareData@mail.nih.gov&#34;&gt;NCIParticipantShareData@mail.nih.gov&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ATAC-Seq workshop</title>
      <link>/talk/2019-07-07-atac-seq-workshop-cshl/</link>
      <pubDate>Mon, 08 Jul 2019 00:00:00 +0000</pubDate>
      <guid>/talk/2019-07-07-atac-seq-workshop-cshl/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Statistical Methods in Functional Genomics</title>
      <link>/talk/2019-07-01-cshl-fungeno-2019/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
      <guid>/talk/2019-07-01-cshl-fungeno-2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Using google cloud registry for private docker images</title>
      <link>/post/using-google-cloud-registry/</link>
      <pubDate>Wed, 06 Feb 2019 13:12:54 -0500</pubDate>
      <guid>/post/using-google-cloud-registry/</guid>
      <description>


&lt;p&gt;In this post, I will quickly build a docker image containing the
sra-toolkit and a key for dbGaP downloads. Because the key file is
private, I will be using the secure Google Container Registry to store
the image for later use in genomics workflows.&lt;/p&gt;
&lt;div id=&#34;background&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Container technologies like &lt;a href=&#34;https://docker.io/&#34;&gt;docker&lt;/a&gt; enable quick and easy
encapsulation of software, dependencies, and operating systems. One or
more containers can render entire software ecosystems portable,
enhance reproducibility and reusability, and facilitate sharing of
software, tools, and even infrastructure.&lt;/p&gt;
&lt;p&gt;While &lt;a href=&#34;https://hub.docker.com/&#34;&gt;DockerHub&lt;/a&gt; is perhaps the most well-known registry where such
docker images can be housed, others such as &lt;a href=&#34;https://quay.io/&#34;&gt;quay.io&lt;/a&gt; are also
available. Commercial cloud environments, such as the &lt;a href=&#34;https://cloud.google.com/&#34;&gt;Google Cloud
Platform&lt;/a&gt; often offer their own registries that use the same secure
access controls as other cloud services, &lt;em&gt;allowing docker images with
proprietary or private information to be stored and accessed
securely&lt;/em&gt;. They are also typically quite integrated with commercial
cloud services (&lt;a href=&#34;https://cloud.google.com/container-registry/docs/&#34;&gt;gcr docs&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I am experimenting with the &lt;a href=&#34;https://cloud.google.com/container-registry/&#34;&gt;Google Container Registry&lt;/a&gt; (GCR) for a
bioinformatics project that I plan to perform in on Google Cloud. This
blog post simply serves as notes to myself about details of using that
system.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;preliminaries&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Preliminaries&lt;/h2&gt;
&lt;p&gt;A Google Cloud &lt;a href=&#34;https://cloud.google.com/container-registry/docs/quickstart&#34;&gt;account and project&lt;/a&gt; is required to follow along here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/sdk/docs/&#34;&gt;Install the Google Cloud SDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/ubuntu/&#34;&gt;Install
Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to allow docker to use google for authorization, we need to
do this one-time command to get tie docker to google.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;gcloud auth configure-docker&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Answer “yes” to the prompt.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;building-docker-image-and-adding-to-gcr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Building docker image and adding to GCR&lt;/h2&gt;
&lt;p&gt;We are going to build a simple docker file that includes the
&lt;a href=&#34;https://github.com/ncbi/sra-tools&#34;&gt;sra-tools&lt;/a&gt; package, import a private key for downloading files that
are protected, and then store that image to GCR.&lt;/p&gt;
&lt;p&gt;The Dockerfile is given below. Note that I &lt;strong&gt;am not including the dbGaP
key file, as it is private&lt;/strong&gt;, but you could modify the Dockerfile to
include your own key file(s) or simply remove the dbGaP access details
entirely.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/seandavi/410cfbbed6b8db0b4928eb36236e7dda.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;Building the container is one line:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;docker build -t sratoolkit .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, the docker image has been created. Run it locally to
test, for example.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;docker run -ti sratoolkit /bin/bash&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Inside the docker container, all the sra-toolkit binaries are
available.&lt;/p&gt;
&lt;p&gt;Each Google Cloud Project has a private GCR. Therefore, GCR urls
include the &lt;code&gt;PROJECT-ID&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;docker tag sratoolkit gcr.io/isb-cgc-01-0006/sratoolkit:2.9.2
docker push gcr.io/isb-cgc-01-0006/sratoolkit:2.9.2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;usage&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;For fun, we can use the image and the &lt;code&gt;fastq-dump&lt;/code&gt; utility to download
a single SRA run. The docker image will only run as long as necessary
to perform the fastq dump and then will terminate. This post is not
about the details of running docker, but note that the following will
result in the fastq file from the &lt;code&gt;fastq-dump&lt;/code&gt; command ending up in
the &lt;code&gt;/tmp&lt;/code&gt; directory on your machine.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;docker run -v /tmp:/data -ti  gcr.io/isb-cgc-01-0006/sratoolkit:2.9.2\
    /bin/bash -c &amp;quot;cd /root/ncbi/dbGaP-16049/ \
    &amp;amp;&amp;amp; fastq-dump   --split-files --gzip \
    --skip-technical -X 10000   SRR390728&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will result in:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Read 10000 spots for SRR390728
Written 10000 spots for SRR390728&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;best-practices&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Best practices&lt;/h2&gt;
&lt;p&gt;Storing keys, key files, and any other private information in a docker
image is a risky operation and is not a best practice. Leveraging the
security model of GCR mitigates these issues. However, it is &lt;strong&gt;really
easy&lt;/strong&gt; to forget about the information that might be leaked if this
image were shared or pushed to a public repository like DockerHub.&lt;/p&gt;
&lt;p&gt;For a discussion of other models for accessing private information
inside a docker container, see &lt;a href=&#34;https://www.ctl.io/developers/blog/post/tutorial-protecting-sensitive-info-docker&#34;&gt;this blog post, for example&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;from-here&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;From here&lt;/h2&gt;
&lt;p&gt;At this point, we have created an environment for building docker
images, stored a proprietary docker image in the Google Cloud
Registry, and successfully used the image to run a simple command to
perform a &lt;code&gt;fastq-dump&lt;/code&gt; with the files ending up on the docker host
machine. This image can be used anywhere a docker image can run, but
only if google authentication &lt;a href=&#34;#preliminaries&#34;&gt;has been tied into docker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://cloud.google.com/genomics/docs/quickstart&#34;&gt;Google Genomics Pipeline API&lt;/a&gt; is built around scalable genomic
workflows and uses docker images for workflow tasks. The image here
can be used for dbGaP genomic data extraction as part of such a
workflow, all within the secure environment of google cloud.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
