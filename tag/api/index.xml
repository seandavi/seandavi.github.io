<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>API | seandavi(s12)</title>
    <link>/tag/api/</link>
      <atom:link href="/tag/api/index.xml" rel="self" type="application/rss+xml" />
    <description>API</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Wed, 11 Mar 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>API</title>
      <link>/tag/api/</link>
    </image>
    
    <item>
      <title>OmicIDX</title>
      <link>/project/omicidx/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/project/omicidx/</guid>
      <description>&lt;p&gt;OmicIDX is an ecosystem that &lt;em&gt;treats metadata&lt;/em&gt; from public genomics
repositories as &lt;em&gt;data&lt;/em&gt;. Metadata collection from source repositories
updates occur regularly and processing using a purpose-build &lt;a href=&#34;https://github.com/omicidx/omicidx-parsers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;parsing
library&lt;/a&gt; produces standard
json format representations. The &lt;a href=&#34;https://github.com/omicidx/omicidx-builder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OmicIDX
builder&lt;/a&gt; automates
&lt;a href=&#34;https://cloud.google.com/bigquery&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bigquery&lt;/a&gt; and web-based API
generation and updates. The &lt;a href=&#34;https://api.omicidx.cancerdatasci.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenAPI-based web
API&lt;/a&gt; enables performant
language-agnostic search, retrieval, and analysis of OmicIDX
data. Finally, data are augmented with &lt;a href=&#34;https://ii.nlm.nih.gov/MTI/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;natural language
processing&lt;/a&gt;
to produce Medical Subject Heading
&lt;a href=&#34;https://www.nlm.nih.gov/mesh/meshhome.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MeSH&lt;/a&gt;  mapping and with
heuristic text matching to map terms to ontologies.&lt;/p&gt;
&lt;p&gt;Datasets currently included in OmicIDX include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SRA
&lt;ul&gt;
&lt;li&gt;studies&lt;/li&gt;
&lt;li&gt;samples&lt;/li&gt;
&lt;li&gt;experiments&lt;/li&gt;
&lt;li&gt;runs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dbGaP mapping from SRA&lt;/li&gt;
&lt;li&gt;Biosample
&lt;ul&gt;
&lt;li&gt;samples&lt;/li&gt;
&lt;li&gt;projects&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GEO
&lt;ul&gt;
&lt;li&gt;platforms&lt;/li&gt;
&lt;li&gt;series&lt;/li&gt;
&lt;li&gt;samples&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Data are augmented with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MeSH&lt;/li&gt;
&lt;li&gt;~200 Ontologies&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Matched tumor/normal pairs--a use case for the GenomicDataCommons Bioconductor package</title>
      <link>/post/2017-03-04-testing-the-genomicdatacommons-package/</link>
      <pubDate>Sat, 04 Mar 2017 00:00:00 +0000</pubDate>
      <guid>/post/2017-03-04-testing-the-genomicdatacommons-package/</guid>
      <description>


&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The NCI Genomic Data Commons (&lt;a href=&#34;https://gdc.nci.nih.gov&#34;&gt;GDC&lt;/a&gt;) is a reboot of the approach that NCI uses to manage and expose genomic and associated clinical and experimental metadata. I have been working on a &lt;a href=&#34;https://bioconductor.org&#34;&gt;Bioconductor&lt;/a&gt; package that interfaces with the &lt;a href=&#34;https://gdc-api.nci.nih.gov&#34;&gt;GDC API&lt;/a&gt; to provide search and data retrieval from within R.&lt;/p&gt;
&lt;div id=&#34;testing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;testing&lt;/h2&gt;
&lt;p&gt;In the first of what will likely be a set of use cases for the &lt;a href=&#34;https://github.com/Bioconductor/GenomicDataCommons&#34;&gt;GenomicDataCommons&lt;/a&gt;, I am going to address a question that came up on twitter from &lt;a href=&#34;https://twitter.com/sleight82&#34;&gt;@sleight82&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/sleight82/status/837898737540198400&#34;&gt;Asking for a non-tweeter: can you find matched control samples?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;asking for a non-tweeter: can you find matched control samples?&lt;/p&gt;&amp;mdash; Kenneth Daily (@sleight82) &lt;a href=&#34;https://twitter.com/sleight82/status/837898737540198400?ref_src=twsrc%5Etfw&#34;&gt;March 4, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;The answer is, “Yes.” I am going to assume that what the “non-tweeter” friend meant was that he or she was interested in finding matched tumor/normal data related to, for example, gene expression, and that the interest is in a specific disease category or TCGA. So, I am going to answer the more specific question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can you find matched primary tumor/solid tissue normal samples and associated RNA-Seq gene expression files from TCGA breast cancer cases?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(GenomicDataCommons)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: magrittr&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;GenomicDataCommons&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following object is masked from &amp;#39;package:stats&amp;#39;:
## 
##     filter&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;dplyr&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:GenomicDataCommons&amp;#39;:
## 
##     count, filter, select&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     filter, lag&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:base&amp;#39;:
## 
##     intersect, setdiff, setequal, union&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The GDC API puts some constraints on what can be done directly. But, since we are working in R, we have a toolbox that allows us to build a solution out of component parts. The strategy that I am going to employ is a three-step approach&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Find RNA-Seq gene expression files derived from “Solid Tissue Normal”&lt;/li&gt;
&lt;li&gt;Find RNA-Seq gene expression files derived from “Primary Tumor”&lt;/li&gt;
&lt;li&gt;Limit cases from #1 and #2 that have gene expression results from both normal and tumor.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this code block, find all “HTSeq - Counts” files that are derived from “Solid Tissue Normal” in the project “TCGA-BRCA”. I used a combination of &lt;code&gt;files() %&amp;gt;% select(available_fields(&#39;files&#39;) %&amp;gt;% results()&lt;/code&gt; to get an overview of the data available in the &lt;code&gt;files()&lt;/code&gt; endpoint, followed by &lt;code&gt;grep_fields()&lt;/code&gt; and &lt;code&gt;available_values()&lt;/code&gt; to determine how to build filters.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nl_ge_files = files() %&amp;gt;%
    GenomicDataCommons::filter(~   cases.samples.sample_type==&amp;#39;Solid Tissue Normal&amp;#39; &amp;amp;
               cases.project.project_id == &amp;#39;TCGA-BRCA&amp;#39; &amp;amp;
               analysis.workflow_type == &amp;quot;HTSeq - Counts&amp;quot;) %&amp;gt;%
    expand(c(&amp;#39;cases&amp;#39;,&amp;#39;cases.samples&amp;#39;)) %&amp;gt;%
    results_all() %&amp;gt;%
    as_tibble()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And do the same, but now looking for gene expression from tumors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tm_ge_files = files() %&amp;gt;%
    GenomicDataCommons::filter(~   cases.samples.sample_type==&amp;#39;Primary Tumor&amp;#39; &amp;amp;
               cases.project.project_id == &amp;#39;TCGA-BRCA&amp;#39; &amp;amp;
               analysis.workflow_type == &amp;quot;HTSeq - Counts&amp;quot;) %&amp;gt;%
    expand(c(&amp;#39;cases&amp;#39;,&amp;#39;cases.samples&amp;#39;)) %&amp;gt;%
    results_all() %&amp;gt;%
    as_tibble()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we have two data frames describing the normal- and tumor-derived TCGA-BRCA gene expression files. Note that I asked the GDC to provide &lt;code&gt;cases.case_id&lt;/code&gt; as part of the record using &lt;code&gt;select()&lt;/code&gt;. By looking for the intersection of cases between these two sets of files, we can find cases that contain files derived from both tumor and normal tissue.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nl_cases = bind_rows(nl_ge_files$cases, .id=&amp;#39;file_id&amp;#39;)
tm_cases = bind_rows(tm_ge_files$cases, .id=&amp;#39;file_id&amp;#39;)
matchedcases = intersect(nl_cases$case_id,
                         tm_cases$case_id)
# how many matched cases?
length(matchedcases)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 112&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now create a &lt;code&gt;data.frame&lt;/code&gt; that contains file information for only the matched samples. Note
that the names of the matched cases are the file ids.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;matched_nl_files = nl_cases[nl_cases$case_id %in% matchedcases, &amp;#39;file_id&amp;#39;]
matched_tm_files = tm_cases[tm_cases$case_id %in% matchedcases, &amp;#39;file_id&amp;#39;]

matched_tn_ge_file_info = rbind(subset(nl_ge_files,file_id %in% matched_nl_files),
                                subset(tm_ge_files,file_id %in% matched_tm_files))
head(matched_tn_ge_file_info)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 17
##   type  md5sum access submitter_id file_id id    data_category experimental_st…
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;           
## 1 gene… e6771… open   327a6650-be… bb7e83… bb7e… Transcriptom… RNA-Seq         
## 2 gene… 18025… open   9570c964-8d… a03b24… a03b… Transcriptom… RNA-Seq         
## 3 gene… 69f47… open   7133f91c-41… 987bf9… 987b… Transcriptom… RNA-Seq         
## 4 gene… 57daa… open   05eb3daf-d3… 7d970a… 7d97… Transcriptom… RNA-Seq         
## 5 gene… 67e69… open   b504f2d6-33… 1e97e8… 1e97… Transcriptom… RNA-Seq         
## 6 gene… 92526… open   d46b61b0-6f… b9cc9d… b9cc… Transcriptom… RNA-Seq         
## # … with 9 more variables: data_type &amp;lt;chr&amp;gt;, state &amp;lt;chr&amp;gt;, file_name &amp;lt;chr&amp;gt;,
## #   cases &amp;lt;named list&amp;gt;, data_format &amp;lt;chr&amp;gt;, updated_datetime &amp;lt;chr&amp;gt;,
## #   created_datetime &amp;lt;chr&amp;gt;, file_size &amp;lt;int&amp;gt;, acl &amp;lt;named list&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since the gene expression data are not that big, we can use the GDC API to download the data files directly. The GenomicDataCommons uses a cache for files, so the first time the code
below is run, data will be downloaded. After that, if the cache is in place, the cached
files will be used.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fnames = lapply(as.character(matched_tn_ge_file_info$file_id),
                  function(file_id) {
                      gdcdata(file_id, progress = FALSE)
                  })&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, &lt;code&gt;fnames&lt;/code&gt; should be a list of file names that can be read into and processed with R.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sessionInfo()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 4.0.0 (2020-04-24)
## Platform: x86_64-apple-darwin17.0 (64-bit)
## Running under: macOS Catalina 10.15.3
## 
## Matrix products: default
## BLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib
## LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib
## 
## locale:
## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] dplyr_0.8.5               GenomicDataCommons_1.12.0
## [3] magrittr_1.5             
## 
## loaded via a namespace (and not attached):
##  [1] SummarizedExperiment_1.18.1 tidyselect_1.1.0           
##  [3] xfun_0.13                   purrr_0.3.4                
##  [5] lattice_0.20-41             vctrs_0.3.0                
##  [7] htmltools_0.4.0             stats4_4.0.0               
##  [9] yaml_2.2.1                  utf8_1.1.4                 
## [11] rlang_0.4.6                 pillar_1.4.4               
## [13] glue_1.4.1                  rappdirs_0.3.1             
## [15] BiocGenerics_0.34.0         matrixStats_0.56.0         
## [17] GenomeInfoDbData_1.2.3      lifecycle_0.2.0            
## [19] stringr_1.4.0               zlibbioc_1.34.0            
## [21] blogdown_0.18               evaluate_0.14              
## [23] Biobase_2.48.0              knitr_1.28                 
## [25] IRanges_2.22.1              GenomeInfoDb_1.24.0        
## [27] parallel_4.0.0              curl_4.3                   
## [29] fansi_0.4.1                 Rcpp_1.0.4.6               
## [31] readr_1.3.1                 BiocManager_1.30.10        
## [33] DelayedArray_0.14.0         S4Vectors_0.26.1           
## [35] jsonlite_1.6.1              XVector_0.28.0             
## [37] hms_0.5.3                   digest_0.6.25              
## [39] stringi_1.4.6               bookdown_0.19              
## [41] GenomicRanges_1.40.0        grid_4.0.0                 
## [43] cli_2.0.2                   tools_4.0.0                
## [45] bitops_1.0-6                RCurl_1.98-1.2             
## [47] tibble_3.0.1                crayon_1.3.4               
## [49] pkgconfig_2.0.3             ellipsis_0.3.1             
## [51] Matrix_1.2-18               xml2_1.3.2                 
## [53] assertthat_0.2.1            rmarkdown_2.1              
## [55] httr_1.4.1                  R6_2.4.1                   
## [57] compiler_4.0.0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
